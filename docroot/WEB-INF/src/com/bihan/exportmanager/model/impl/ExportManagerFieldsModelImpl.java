/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bihan.exportmanager.model.impl;

import com.bihan.exportmanager.model.ExportManagerFields;
import com.bihan.exportmanager.model.ExportManagerFieldsModel;
import com.bihan.exportmanager.model.ExportManagerFieldsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExportManagerFields service. Represents a row in the &quot;EM_ExportManagerFields&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bihan.exportmanager.model.ExportManagerFieldsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExportManagerFieldsImpl}.
 * </p>
 *
 * @author sebastienbihan
 * @see ExportManagerFieldsImpl
 * @see com.bihan.exportmanager.model.ExportManagerFields
 * @see com.bihan.exportmanager.model.ExportManagerFieldsModel
 * @generated
 */
@JSON(strict = true)
public class ExportManagerFieldsModelImpl extends BaseModelImpl<ExportManagerFields>
	implements ExportManagerFieldsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a export manager fields model instance should use the {@link com.bihan.exportmanager.model.ExportManagerFields} interface instead.
	 */
	public static final String TABLE_NAME = "EM_ExportManagerFields";
	public static final Object[][] TABLE_COLUMNS = {
			{ "exportManagerFieldsId", Types.BIGINT },
			{ "exportManagerId", Types.BIGINT },
			{ "fieldName", Types.VARCHAR },
			{ "fieldLabel", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EM_ExportManagerFields (exportManagerFieldsId LONG not null primary key,exportManagerId LONG,fieldName VARCHAR(75) null,fieldLabel VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EM_ExportManagerFields";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bihan.exportmanager.model.ExportManagerFields"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bihan.exportmanager.model.ExportManagerFields"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExportManagerFields toModel(ExportManagerFieldsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExportManagerFields model = new ExportManagerFieldsImpl();

		model.setExportManagerFieldsId(soapModel.getExportManagerFieldsId());
		model.setExportManagerId(soapModel.getExportManagerId());
		model.setFieldName(soapModel.getFieldName());
		model.setFieldLabel(soapModel.getFieldLabel());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExportManagerFields> toModels(
		ExportManagerFieldsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExportManagerFields> models = new ArrayList<ExportManagerFields>(soapModels.length);

		for (ExportManagerFieldsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bihan.exportmanager.model.ExportManagerFields"));

	public ExportManagerFieldsModelImpl() {
	}

	public long getPrimaryKey() {
		return _exportManagerFieldsId;
	}

	public void setPrimaryKey(long primaryKey) {
		setExportManagerFieldsId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_exportManagerFieldsId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ExportManagerFields.class;
	}

	public String getModelClassName() {
		return ExportManagerFields.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("exportManagerFieldsId", getExportManagerFieldsId());
		attributes.put("exportManagerId", getExportManagerId());
		attributes.put("fieldName", getFieldName());
		attributes.put("fieldLabel", getFieldLabel());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long exportManagerFieldsId = (Long)attributes.get(
				"exportManagerFieldsId");

		if (exportManagerFieldsId != null) {
			setExportManagerFieldsId(exportManagerFieldsId);
		}

		Long exportManagerId = (Long)attributes.get("exportManagerId");

		if (exportManagerId != null) {
			setExportManagerId(exportManagerId);
		}

		String fieldName = (String)attributes.get("fieldName");

		if (fieldName != null) {
			setFieldName(fieldName);
		}

		String fieldLabel = (String)attributes.get("fieldLabel");

		if (fieldLabel != null) {
			setFieldLabel(fieldLabel);
		}
	}

	@JSON
	public long getExportManagerFieldsId() {
		return _exportManagerFieldsId;
	}

	public void setExportManagerFieldsId(long exportManagerFieldsId) {
		_exportManagerFieldsId = exportManagerFieldsId;
	}

	@JSON
	public long getExportManagerId() {
		return _exportManagerId;
	}

	public void setExportManagerId(long exportManagerId) {
		_exportManagerId = exportManagerId;
	}

	@JSON
	public String getFieldName() {
		if (_fieldName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldName;
		}
	}

	public void setFieldName(String fieldName) {
		_fieldName = fieldName;
	}

	@JSON
	public String getFieldLabel() {
		if (_fieldLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldLabel;
		}
	}

	public void setFieldLabel(String fieldLabel) {
		_fieldLabel = fieldLabel;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ExportManagerFields.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExportManagerFields toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExportManagerFields)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public ExportManagerFields toUnescapedModel() {
		return (ExportManagerFields)this;
	}

	@Override
	public Object clone() {
		ExportManagerFieldsImpl exportManagerFieldsImpl = new ExportManagerFieldsImpl();

		exportManagerFieldsImpl.setExportManagerFieldsId(getExportManagerFieldsId());
		exportManagerFieldsImpl.setExportManagerId(getExportManagerId());
		exportManagerFieldsImpl.setFieldName(getFieldName());
		exportManagerFieldsImpl.setFieldLabel(getFieldLabel());

		exportManagerFieldsImpl.resetOriginalValues();

		return exportManagerFieldsImpl;
	}

	public int compareTo(ExportManagerFields exportManagerFields) {
		long primaryKey = exportManagerFields.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExportManagerFields)) {
			return false;
		}

		ExportManagerFields exportManagerFields = (ExportManagerFields)obj;

		long primaryKey = exportManagerFields.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ExportManagerFields> toCacheModel() {
		ExportManagerFieldsCacheModel exportManagerFieldsCacheModel = new ExportManagerFieldsCacheModel();

		exportManagerFieldsCacheModel.exportManagerFieldsId = getExportManagerFieldsId();

		exportManagerFieldsCacheModel.exportManagerId = getExportManagerId();

		exportManagerFieldsCacheModel.fieldName = getFieldName();

		String fieldName = exportManagerFieldsCacheModel.fieldName;

		if ((fieldName != null) && (fieldName.length() == 0)) {
			exportManagerFieldsCacheModel.fieldName = null;
		}

		exportManagerFieldsCacheModel.fieldLabel = getFieldLabel();

		String fieldLabel = exportManagerFieldsCacheModel.fieldLabel;

		if ((fieldLabel != null) && (fieldLabel.length() == 0)) {
			exportManagerFieldsCacheModel.fieldLabel = null;
		}

		return exportManagerFieldsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{exportManagerFieldsId=");
		sb.append(getExportManagerFieldsId());
		sb.append(", exportManagerId=");
		sb.append(getExportManagerId());
		sb.append(", fieldName=");
		sb.append(getFieldName());
		sb.append(", fieldLabel=");
		sb.append(getFieldLabel());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.bihan.exportmanager.model.ExportManagerFields");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>exportManagerFieldsId</column-name><column-value><![CDATA[");
		sb.append(getExportManagerFieldsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exportManagerId</column-name><column-value><![CDATA[");
		sb.append(getExportManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldName</column-name><column-value><![CDATA[");
		sb.append(getFieldName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldLabel</column-name><column-value><![CDATA[");
		sb.append(getFieldLabel());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExportManagerFields.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ExportManagerFields.class
		};
	private long _exportManagerFieldsId;
	private long _exportManagerId;
	private String _fieldName;
	private String _fieldLabel;
	private ExportManagerFields _escapedModel;
}