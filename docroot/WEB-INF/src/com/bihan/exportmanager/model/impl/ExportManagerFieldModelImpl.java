/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bihan.exportmanager.model.impl;

import com.bihan.exportmanager.model.ExportManagerField;
import com.bihan.exportmanager.model.ExportManagerFieldModel;
import com.bihan.exportmanager.model.ExportManagerFieldSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExportManagerField service. Represents a row in the &quot;EM_ExportManagerField&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bihan.exportmanager.model.ExportManagerFieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExportManagerFieldImpl}.
 * </p>
 *
 * @author sebastienbihan
 * @see ExportManagerFieldImpl
 * @see com.bihan.exportmanager.model.ExportManagerField
 * @see com.bihan.exportmanager.model.ExportManagerFieldModel
 * @generated
 */
@JSON(strict = true)
public class ExportManagerFieldModelImpl extends BaseModelImpl<ExportManagerField>
	implements ExportManagerFieldModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a export manager field model instance should use the {@link com.bihan.exportmanager.model.ExportManagerField} interface instead.
	 */
	public static final String TABLE_NAME = "EM_ExportManagerField";
	public static final Object[][] TABLE_COLUMNS = {
			{ "exportManagerFieldId", Types.BIGINT },
			{ "exportManagerId", Types.BIGINT },
			{ "fieldName", Types.VARCHAR },
			{ "fieldDisplayName", Types.VARCHAR },
			{ "position", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table EM_ExportManagerField (exportManagerFieldId LONG not null primary key,exportManagerId LONG,fieldName VARCHAR(75) null,fieldDisplayName VARCHAR(75) null,position INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EM_ExportManagerField";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bihan.exportmanager.model.ExportManagerField"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bihan.exportmanager.model.ExportManagerField"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bihan.exportmanager.model.ExportManagerField"),
			true);
	public static long EXPORTMANAGERID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExportManagerField toModel(ExportManagerFieldSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExportManagerField model = new ExportManagerFieldImpl();

		model.setExportManagerFieldId(soapModel.getExportManagerFieldId());
		model.setExportManagerId(soapModel.getExportManagerId());
		model.setFieldName(soapModel.getFieldName());
		model.setFieldDisplayName(soapModel.getFieldDisplayName());
		model.setPosition(soapModel.getPosition());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExportManagerField> toModels(
		ExportManagerFieldSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExportManagerField> models = new ArrayList<ExportManagerField>(soapModels.length);

		for (ExportManagerFieldSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bihan.exportmanager.model.ExportManagerField"));

	public ExportManagerFieldModelImpl() {
	}

	public long getPrimaryKey() {
		return _exportManagerFieldId;
	}

	public void setPrimaryKey(long primaryKey) {
		setExportManagerFieldId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_exportManagerFieldId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ExportManagerField.class;
	}

	public String getModelClassName() {
		return ExportManagerField.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("exportManagerFieldId", getExportManagerFieldId());
		attributes.put("exportManagerId", getExportManagerId());
		attributes.put("fieldName", getFieldName());
		attributes.put("fieldDisplayName", getFieldDisplayName());
		attributes.put("position", getPosition());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long exportManagerFieldId = (Long)attributes.get("exportManagerFieldId");

		if (exportManagerFieldId != null) {
			setExportManagerFieldId(exportManagerFieldId);
		}

		Long exportManagerId = (Long)attributes.get("exportManagerId");

		if (exportManagerId != null) {
			setExportManagerId(exportManagerId);
		}

		String fieldName = (String)attributes.get("fieldName");

		if (fieldName != null) {
			setFieldName(fieldName);
		}

		String fieldDisplayName = (String)attributes.get("fieldDisplayName");

		if (fieldDisplayName != null) {
			setFieldDisplayName(fieldDisplayName);
		}

		Integer position = (Integer)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}
	}

	@JSON
	public long getExportManagerFieldId() {
		return _exportManagerFieldId;
	}

	public void setExportManagerFieldId(long exportManagerFieldId) {
		_exportManagerFieldId = exportManagerFieldId;
	}

	@JSON
	public long getExportManagerId() {
		return _exportManagerId;
	}

	public void setExportManagerId(long exportManagerId) {
		_columnBitmask |= EXPORTMANAGERID_COLUMN_BITMASK;

		if (!_setOriginalExportManagerId) {
			_setOriginalExportManagerId = true;

			_originalExportManagerId = _exportManagerId;
		}

		_exportManagerId = exportManagerId;
	}

	public long getOriginalExportManagerId() {
		return _originalExportManagerId;
	}

	@JSON
	public String getFieldName() {
		if (_fieldName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldName;
		}
	}

	public void setFieldName(String fieldName) {
		_fieldName = fieldName;
	}

	@JSON
	public String getFieldDisplayName() {
		if (_fieldDisplayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldDisplayName;
		}
	}

	public void setFieldDisplayName(String fieldDisplayName) {
		_fieldDisplayName = fieldDisplayName;
	}

	@JSON
	public int getPosition() {
		return _position;
	}

	public void setPosition(int position) {
		_position = position;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ExportManagerField.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExportManagerField toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExportManagerField)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public ExportManagerField toUnescapedModel() {
		return (ExportManagerField)this;
	}

	@Override
	public Object clone() {
		ExportManagerFieldImpl exportManagerFieldImpl = new ExportManagerFieldImpl();

		exportManagerFieldImpl.setExportManagerFieldId(getExportManagerFieldId());
		exportManagerFieldImpl.setExportManagerId(getExportManagerId());
		exportManagerFieldImpl.setFieldName(getFieldName());
		exportManagerFieldImpl.setFieldDisplayName(getFieldDisplayName());
		exportManagerFieldImpl.setPosition(getPosition());

		exportManagerFieldImpl.resetOriginalValues();

		return exportManagerFieldImpl;
	}

	public int compareTo(ExportManagerField exportManagerField) {
		long primaryKey = exportManagerField.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExportManagerField)) {
			return false;
		}

		ExportManagerField exportManagerField = (ExportManagerField)obj;

		long primaryKey = exportManagerField.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ExportManagerFieldModelImpl exportManagerFieldModelImpl = this;

		exportManagerFieldModelImpl._originalExportManagerId = exportManagerFieldModelImpl._exportManagerId;

		exportManagerFieldModelImpl._setOriginalExportManagerId = false;

		exportManagerFieldModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExportManagerField> toCacheModel() {
		ExportManagerFieldCacheModel exportManagerFieldCacheModel = new ExportManagerFieldCacheModel();

		exportManagerFieldCacheModel.exportManagerFieldId = getExportManagerFieldId();

		exportManagerFieldCacheModel.exportManagerId = getExportManagerId();

		exportManagerFieldCacheModel.fieldName = getFieldName();

		String fieldName = exportManagerFieldCacheModel.fieldName;

		if ((fieldName != null) && (fieldName.length() == 0)) {
			exportManagerFieldCacheModel.fieldName = null;
		}

		exportManagerFieldCacheModel.fieldDisplayName = getFieldDisplayName();

		String fieldDisplayName = exportManagerFieldCacheModel.fieldDisplayName;

		if ((fieldDisplayName != null) && (fieldDisplayName.length() == 0)) {
			exportManagerFieldCacheModel.fieldDisplayName = null;
		}

		exportManagerFieldCacheModel.position = getPosition();

		return exportManagerFieldCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{exportManagerFieldId=");
		sb.append(getExportManagerFieldId());
		sb.append(", exportManagerId=");
		sb.append(getExportManagerId());
		sb.append(", fieldName=");
		sb.append(getFieldName());
		sb.append(", fieldDisplayName=");
		sb.append(getFieldDisplayName());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.bihan.exportmanager.model.ExportManagerField");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>exportManagerFieldId</column-name><column-value><![CDATA[");
		sb.append(getExportManagerFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exportManagerId</column-name><column-value><![CDATA[");
		sb.append(getExportManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldName</column-name><column-value><![CDATA[");
		sb.append(getFieldName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldDisplayName</column-name><column-value><![CDATA[");
		sb.append(getFieldDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExportManagerField.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ExportManagerField.class
		};
	private long _exportManagerFieldId;
	private long _exportManagerId;
	private long _originalExportManagerId;
	private boolean _setOriginalExportManagerId;
	private String _fieldName;
	private String _fieldDisplayName;
	private int _position;
	private long _columnBitmask;
	private ExportManagerField _escapedModel;
}