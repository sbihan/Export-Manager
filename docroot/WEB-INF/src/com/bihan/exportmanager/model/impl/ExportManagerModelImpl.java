/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bihan.exportmanager.model.impl;

import com.bihan.exportmanager.model.ExportManager;
import com.bihan.exportmanager.model.ExportManagerModel;
import com.bihan.exportmanager.model.ExportManagerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExportManager service. Represents a row in the &quot;EM_ExportManager&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.bihan.exportmanager.model.ExportManagerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExportManagerImpl}.
 * </p>
 *
 * @author sebastienbihan
 * @see ExportManagerImpl
 * @see com.bihan.exportmanager.model.ExportManager
 * @see com.bihan.exportmanager.model.ExportManagerModel
 * @generated
 */
@JSON(strict = true)
public class ExportManagerModelImpl extends BaseModelImpl<ExportManager>
	implements ExportManagerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a export manager model instance should use the {@link com.bihan.exportmanager.model.ExportManager} interface instead.
	 */
	public static final String TABLE_NAME = "EM_ExportManager";
	public static final Object[][] TABLE_COLUMNS = {
			{ "exportManagerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "classNameId", Types.BIGINT },
			{ "classNameValue", Types.VARCHAR },
			{ "scope", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EM_ExportManager (exportManagerId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,classNameId LONG,classNameValue VARCHAR(75) null,scope VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EM_ExportManager";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bihan.exportmanager.model.ExportManager"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bihan.exportmanager.model.ExportManager"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ExportManager toModel(ExportManagerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ExportManager model = new ExportManagerImpl();

		model.setExportManagerId(soapModel.getExportManagerId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassNameValue(soapModel.getClassNameValue());
		model.setScope(soapModel.getScope());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ExportManager> toModels(ExportManagerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ExportManager> models = new ArrayList<ExportManager>(soapModels.length);

		for (ExportManagerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.bihan.exportmanager.model.ExportManager"));

	public ExportManagerModelImpl() {
	}

	public long getPrimaryKey() {
		return _exportManagerId;
	}

	public void setPrimaryKey(long primaryKey) {
		setExportManagerId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_exportManagerId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ExportManager.class;
	}

	public String getModelClassName() {
		return ExportManager.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("exportManagerId", getExportManagerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classNameValue", getClassNameValue());
		attributes.put("scope", getScope());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long exportManagerId = (Long)attributes.get("exportManagerId");

		if (exportManagerId != null) {
			setExportManagerId(exportManagerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		String classNameValue = (String)attributes.get("classNameValue");

		if (classNameValue != null) {
			setClassNameValue(classNameValue);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}
	}

	@JSON
	public long getExportManagerId() {
		return _exportManagerId;
	}

	public void setExportManagerId(long exportManagerId) {
		_exportManagerId = exportManagerId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	public long getClassNameId() {
		return _classNameId;
	}

	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	public String getClassNameValue() {
		if (_classNameValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _classNameValue;
		}
	}

	public void setClassNameValue(String classNameValue) {
		_classNameValue = classNameValue;
	}

	@JSON
	public String getScope() {
		if (_scope == null) {
			return StringPool.BLANK;
		}
		else {
			return _scope;
		}
	}

	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExportManager.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExportManager toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExportManager)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public ExportManager toUnescapedModel() {
		return (ExportManager)this;
	}

	@Override
	public Object clone() {
		ExportManagerImpl exportManagerImpl = new ExportManagerImpl();

		exportManagerImpl.setExportManagerId(getExportManagerId());
		exportManagerImpl.setCompanyId(getCompanyId());
		exportManagerImpl.setUserId(getUserId());
		exportManagerImpl.setCreateDate(getCreateDate());
		exportManagerImpl.setModifiedDate(getModifiedDate());
		exportManagerImpl.setName(getName());
		exportManagerImpl.setDescription(getDescription());
		exportManagerImpl.setClassNameId(getClassNameId());
		exportManagerImpl.setClassNameValue(getClassNameValue());
		exportManagerImpl.setScope(getScope());

		exportManagerImpl.resetOriginalValues();

		return exportManagerImpl;
	}

	public int compareTo(ExportManager exportManager) {
		long primaryKey = exportManager.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExportManager)) {
			return false;
		}

		ExportManager exportManager = (ExportManager)obj;

		long primaryKey = exportManager.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ExportManager> toCacheModel() {
		ExportManagerCacheModel exportManagerCacheModel = new ExportManagerCacheModel();

		exportManagerCacheModel.exportManagerId = getExportManagerId();

		exportManagerCacheModel.companyId = getCompanyId();

		exportManagerCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			exportManagerCacheModel.createDate = createDate.getTime();
		}
		else {
			exportManagerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			exportManagerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			exportManagerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		exportManagerCacheModel.name = getName();

		String name = exportManagerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			exportManagerCacheModel.name = null;
		}

		exportManagerCacheModel.description = getDescription();

		String description = exportManagerCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			exportManagerCacheModel.description = null;
		}

		exportManagerCacheModel.classNameId = getClassNameId();

		exportManagerCacheModel.classNameValue = getClassNameValue();

		String classNameValue = exportManagerCacheModel.classNameValue;

		if ((classNameValue != null) && (classNameValue.length() == 0)) {
			exportManagerCacheModel.classNameValue = null;
		}

		exportManagerCacheModel.scope = getScope();

		String scope = exportManagerCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			exportManagerCacheModel.scope = null;
		}

		return exportManagerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{exportManagerId=");
		sb.append(getExportManagerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classNameValue=");
		sb.append(getClassNameValue());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.bihan.exportmanager.model.ExportManager");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>exportManagerId</column-name><column-value><![CDATA[");
		sb.append(getExportManagerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameValue</column-name><column-value><![CDATA[");
		sb.append(getClassNameValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExportManager.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ExportManager.class
		};
	private long _exportManagerId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _description;
	private long _classNameId;
	private String _classNameValue;
	private String _scope;
	private ExportManager _escapedModel;
}